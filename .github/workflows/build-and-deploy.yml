name: CI

# 1 
# Controls when the workflow will run

on:
  push: 
    branches: [ main ]

  workflow_dispatch:
    inputs:
      version:
        description: 'Image version'
        required: true

# 2
jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repo
        uses: actions/checkout@v3

      - name: Login to Digital Ocean
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}  
          port: 22
          script: |
            mkdir app
            cd app
            git clone https://github.com/${{ github.repository }}
            cd crm
            git submodule update --init
            git submodule update --remote
            git pull
      - name: Create .env from crm-server
        run: |
          pwd
          whoami
          ls -al
          cd crm-server
          if [ -f .env ]; then
            rm .env
          fi
          touch .env
          echo "PORT=8080" >> .env
          echo "DB_DIALECT=postgres" >> .env
          echo "DB_HOST=db" >> .env
          echo "DB_NAME=crm" >> .env
          echo "DB_PORT=5432" >> .env
          echo "DB_PWD=postgres" >> .env
          echo "DB_USER=postgres" >> .env
          echo "NODE_ENV=development" >> .env
          echo "TOKEN_SECRET_KEY=ahaseaseesaee" >> .env 
      - name: Create .env from crm-client
        working-directory: ./app/crm/crm-client
        run: |
            if [ -f .env ]; then
              rm .env
            fi
            touch .env
            echo "REACT_APP_API_URL = http://localhost:8080/api" > .env
      - name: re-build docker-compose
        working-directory: ./app/crm
        run: |
          sudo docker-compose stop
          npm run install-dependencies
          sudo docker-compose up -d --build
          echo 'Deployment sucessful'
      
        
        
      
      
